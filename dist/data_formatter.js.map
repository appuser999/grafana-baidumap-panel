{"version":3,"sources":["../src/data_formatter.js"],"names":["_","decodeGeoHash","DataFormatter","ctrl","kbn","data","series","length","highestValue","lowestValue","Number","MAX_VALUE","forEach","serie","lastPoint","last","datapoints","lastValue","isArray","location","find","locations","loc","key","toUpperCase","alias","isString","push","value","valueFormatted","valueRounded","dataValue","locationName","name","locationLatitude","latitude","locationLongitude","longitude","stats","panel","valueName","roundValue","parseInt","decimals","valueRange","encodedGeohash","decodedGeohash","dataList","esGeoPoint","esMetric","result","type","columnNames","columns","column","columnIndex","text","rows","row","esLocationName","createDataValue","datapoint","tableData","dataIndex","point","undefined","Math","round"],"mappings":";;;;;;;;;;;;;;;AACOA,a;;AACAC,yB;;;;;;;;;;;;;;;;;;;;;AAEcC,yB;AACjB,uCAAYC,IAAZ,EAAkBC,GAAlB,EAAuB;AAAA;;AACnB,yBAAKD,IAAL,GAAYA,IAAZ;AACA,yBAAKC,GAAL,GAAWA,GAAX;AACH;;;;8CAESC,I,EAAM;AAAA;;AACZ,4BAAI,KAAKF,IAAL,CAAUG,MAAV,IAAoB,KAAKH,IAAL,CAAUG,MAAV,CAAiBC,MAAjB,GAA0B,CAAlD,EAAqD;AACjD,gCAAIC,eAAe,CAAnB;AACA,gCAAIC,cAAcC,OAAOC,SAAzB;;AAEA,iCAAKR,IAAL,CAAUG,MAAV,CAAiBM,OAAjB,CAAyB,UAACC,KAAD,EAAW;AAChC,oCAAMC,YAAYd,EAAEe,IAAF,CAAOF,MAAMG,UAAb,CAAlB;AACA,oCAAMC,YAAYjB,EAAEkB,OAAF,CAAUJ,SAAV,IAAuBA,UAAU,CAAV,CAAvB,GAAsC,IAAxD;AACA,oCAAMK,WAAWnB,EAAEoB,IAAF,CAAO,MAAKjB,IAAL,CAAUkB,SAAjB,EAA4B,UAACC,GAAD,EAAS;AAClD,2CAAOA,IAAIC,GAAJ,CAAQC,WAAR,OAA0BX,MAAMY,KAAN,CAAYD,WAAZ,EAAjC;AACH,iCAFgB,CAAjB;;AAIA,oCAAI,CAACL,QAAL,EAAe;;AAEf,oCAAInB,EAAE0B,QAAF,CAAWT,SAAX,CAAJ,EAA2B;AACvBZ,yCAAKsB,IAAL,CAAU,EAACJ,KAAKV,MAAMY,KAAZ,EAAmBG,OAAO,CAA1B,EAA6BC,gBAAgBZ,SAA7C,EAAwDa,cAAc,CAAtE,EAAV;AACH,iCAFD,MAEO;AACH,wCAAMC,YAAY;AACdR,6CAAKV,MAAMY,KADG;AAEdO,sDAAcb,SAASc,IAFT;AAGdC,0DAAkBf,SAASgB,QAHb;AAIdC,2DAAmBjB,SAASkB,SAJd;AAKdT,+CAAOf,MAAMyB,KAAN,CAAY,MAAKnC,IAAL,CAAUoC,KAAV,CAAgBC,SAA5B,CALO;AAMdX,wDAAgBZ,SANF;AAOda,sDAAc;AAPA,qCAAlB;;AAUA,wCAAIC,UAAUH,KAAV,GAAkBpB,YAAtB,EAAoCA,eAAeuB,UAAUH,KAAzB;AACpC,wCAAIG,UAAUH,KAAV,GAAkBnB,WAAtB,EAAmCA,cAAcsB,UAAUH,KAAxB;;AAEnCG,8CAAUD,YAAV,GAAyB,MAAK1B,GAAL,CAASqC,UAAT,CAAoBV,UAAUH,KAA9B,EAAqCc,SAAS,MAAKvC,IAAL,CAAUoC,KAAV,CAAgBI,QAAzB,EAAmC,EAAnC,KAA0C,CAA/E,CAAzB;AACAtC,yCAAKsB,IAAL,CAAUI,SAAV;AACH;AACJ,6BA5BD;;AA8BA1B,iCAAKG,YAAL,GAAoBA,YAApB;AACAH,iCAAKI,WAAL,GAAmBA,WAAnB;AACAJ,iCAAKuC,UAAL,GAAkBpC,eAAeC,WAAjC;AACH;AACJ;;;oDAEeoC,c,EAAgBC,c,EAAgBd,Y,EAAcJ,K,EAAO;AACjE,4BAAMG,YAAY;AACdR,iCAAKsB,cADS;AAEdb,0CAAcA,YAFA;AAGdE,8CAAkBY,eAAeX,QAHnB;AAIdC,+CAAmBU,eAAeT,SAJpB;AAKdT,mCAAOA,KALO;AAMdC,4CAAgBD,KANF;AAOdE,0CAAc;AAPA,yBAAlB;;AAUAC,kCAAUD,YAAV,GAAyB,KAAK1B,GAAL,CAASqC,UAAT,CAAoBV,UAAUH,KAA9B,EAAqC,KAAKzB,IAAL,CAAUoC,KAAV,CAAgBI,QAAhB,IAA4B,CAAjE,CAAzB;AACA,+BAAOZ,SAAP;AACH;;;qDAEgBgB,Q,EAAU1C,I,EAAM;AAAA;;AAC7B,4BAAI,CAAC,KAAKF,IAAL,CAAUoC,KAAV,CAAgBS,UAAjB,IAA+B,CAAC,KAAK7C,IAAL,CAAUoC,KAAV,CAAgBU,QAApD,EAA8D;;AAE9D,4BAAIF,YAAYA,SAASxC,MAAT,GAAkB,CAAlC,EAAqC;AACjC,gCAAIC,eAAe,CAAnB;AACA,gCAAIC,cAAcC,OAAOC,SAAzB;;AAEAoC,qCAASnC,OAAT,CAAiB,UAACsC,MAAD,EAAY;AACzB,oCAAIA,OAAOC,IAAP,KAAgB,OAApB,EAA6B;AACzB,wCAAMC,cAAc,EAApB;;AAEAF,2CAAOG,OAAP,CAAezC,OAAf,CAAuB,UAAC0C,MAAD,EAASC,WAAT,EAAyB;AAC5CH,oDAAYE,OAAOE,IAAnB,IAA2BD,WAA3B;AACH,qCAFD;;AAIAL,2CAAOO,IAAP,CAAY7C,OAAZ,CAAoB,UAAC8C,GAAD,EAAS;AACzB,4CAAMb,iBAAiBa,IAAIN,YAAY,OAAKjD,IAAL,CAAUoC,KAAV,CAAgBS,UAA5B,CAAJ,CAAvB;AACA,4CAAMF,iBAAiB7C,cAAc4C,cAAd,CAAvB;AACA,4CAAMb,eAAe,OAAK7B,IAAL,CAAUoC,KAAV,CAAgBoB,cAAhB,GAAiCD,IAAIN,YAAY,OAAKjD,IAAL,CAAUoC,KAAV,CAAgBoB,cAA5B,CAAJ,CAAjC,GAAoFd,cAAzG;AACA,4CAAMjB,QAAQ8B,IAAIN,YAAY,OAAKjD,IAAL,CAAUoC,KAAV,CAAgBU,QAA5B,CAAJ,CAAd;;AAEA,4CAAMlB,YAAY,OAAK6B,eAAL,CAAqBf,cAArB,EAAqCC,cAArC,EAAqDd,YAArD,EAAmEJ,KAAnE,EAA0EpB,YAA1E,EAAwFC,WAAxF,CAAlB;AACA,4CAAIsB,UAAUH,KAAV,GAAkBpB,YAAtB,EAAoCA,eAAeuB,UAAUH,KAAzB;AACpC,4CAAIG,UAAUH,KAAV,GAAkBnB,WAAtB,EAAmCA,cAAcsB,UAAUH,KAAxB;AACnCvB,6CAAKsB,IAAL,CAAUI,SAAV;AACH,qCAVD;;AAYA1B,yCAAKG,YAAL,GAAoBA,YAApB;AACAH,yCAAKI,WAAL,GAAmBA,WAAnB;AACAJ,yCAAKuC,UAAL,GAAkBpC,eAAeC,WAAjC;AACH,iCAtBD,MAsBO;AACHyC,2CAAOlC,UAAP,CAAkBJ,OAAlB,CAA0B,UAACiD,SAAD,EAAe;AACrC,4CAAMhB,iBAAiBgB,UAAU,OAAK1D,IAAL,CAAUoC,KAAV,CAAgBS,UAA1B,CAAvB;AACA,4CAAMF,iBAAiB7C,cAAc4C,cAAd,CAAvB;AACA,4CAAMb,eAAe,OAAK7B,IAAL,CAAUoC,KAAV,CAAgBoB,cAAhB,GAAiCE,UAAU,OAAK1D,IAAL,CAAUoC,KAAV,CAAgBoB,cAA1B,CAAjC,GAA6Ed,cAAlG;AACA,4CAAMjB,QAAQiC,UAAU,OAAK1D,IAAL,CAAUoC,KAAV,CAAgBU,QAA1B,CAAd;;AAEA,4CAAMlB,YAAY,OAAK6B,eAAL,CAAqBf,cAArB,EAAqCC,cAArC,EAAqDd,YAArD,EAAmEJ,KAAnE,EAA0EpB,YAA1E,EAAwFC,WAAxF,CAAlB;AACA,4CAAIsB,UAAUH,KAAV,GAAkBpB,YAAtB,EAAoCA,eAAeuB,UAAUH,KAAzB;AACpC,4CAAIG,UAAUH,KAAV,GAAkBnB,WAAtB,EAAmCA,cAAcsB,UAAUH,KAAxB;AACnCvB,6CAAKsB,IAAL,CAAUI,SAAV;AACH,qCAVD;;AAYA1B,yCAAKG,YAAL,GAAoBA,YAApB;AACAH,yCAAKI,WAAL,GAAmBA,WAAnB;AACAJ,yCAAKuC,UAAL,GAAkBpC,eAAeC,WAAjC;AACH;AACJ,6BAxCD;AAyCH;AACJ;;;mDA8CcqD,S,EAAWzD,I,EAAM;AAC5B,4BAAIyD,aAAaA,UAAUvD,MAAV,GAAmB,CAApC,EAAuC;AACnC,iCAAK,IAAIwD,YAAY,CAArB,EAAwBA,YAAYD,UAAUvD,MAA9C,EAAsDwD,WAAtD,EAAmE;AAC/DD,0CAAUC,SAAV,EAAqBnD,OAArB,CAA6B,UAACiD,SAAD,EAAe;AACxCxD,yCAAKsB,IAAL,CAAUkC,SAAV;AACH,iCAFD;AAGH;AACJ;AACJ;;;kDAEaxD,I,EAAM;AAChB,4BAAI,KAAKF,IAAL,CAAUG,MAAV,IAAoB,KAAKH,IAAL,CAAUG,MAAV,CAAiBC,MAAjB,GAA0B,CAAlD,EAAqD;AACjD,gCAAIC,eAAe,CAAnB;AACA,gCAAIC,cAAcC,OAAOC,SAAzB;;AAEA,iCAAKR,IAAL,CAAUG,MAAV,CAAiBM,OAAjB,CAAyB,UAACoD,KAAD,EAAW;AAChC,oCAAMjC,YAAY;AACdR,yCAAKyC,MAAMzC,GADG;AAEdS,kDAAcgC,MAAM/B,IAFN;AAGdC,sDAAkB8B,MAAM7B,QAHV;AAIdC,uDAAmB4B,MAAM3B,SAJX;AAKdT,2CAAQoC,MAAMpC,KAAN,KAAgBqC,SAAjB,GAA8BD,MAAMpC,KAApC,GAA4C,CALrC;AAMdE,kDAAc;AANA,iCAAlB;AAQA,oCAAIC,UAAUH,KAAV,GAAkBpB,YAAtB,EAAoCA,eAAeuB,UAAUH,KAAzB;AACpC,oCAAIG,UAAUH,KAAV,GAAkBnB,WAAtB,EAAmCA,cAAcsB,UAAUH,KAAxB;AACnCG,0CAAUD,YAAV,GAAyBoC,KAAKC,KAAL,CAAWpC,UAAUH,KAArB,CAAzB;AACAvB,qCAAKsB,IAAL,CAAUI,SAAV;AACH,6BAbD;AAcA1B,iCAAKG,YAAL,GAAoBA,YAApB;AACAH,iCAAKI,WAAL,GAAmBA,WAAnB;AACAJ,iCAAKuC,UAAL,GAAkBpC,eAAeC,WAAjC;AACH;AACJ;;;iDA7EmBqD,S,EAAW;AAC3B,4BAAM9C,aAAa,EAAnB;AACA,4BAAI8C,UAAUX,IAAV,KAAmB,OAAvB,EAAgC;AAC5B,gCAAMC,cAAc,EAApB;;AAEAU,sCAAUT,OAAV,CAAkBzC,OAAlB,CAA0B,UAAC0C,MAAD,EAASC,WAAT,EAAyB;AAC/CH,4CAAYG,WAAZ,IAA2BD,MAA3B;AACH,6BAFD;AAGAQ,sCAAUL,IAAV,CAAe7C,OAAf,CAAuB,UAAC8C,GAAD,EAAS;AAC5B,oCAAMG,YAAY,EAAlB;;AAEAH,oCAAI9C,OAAJ,CAAY,UAACgB,KAAD,EAAQ2B,WAAR,EAAwB;AAChC,wCAAMhC,MAAM6B,YAAYG,WAAZ,CAAZ;AACAM,8CAAUtC,GAAV,IAAiBK,KAAjB;AACH,iCAHD;;AAKAZ,2CAAWW,IAAX,CAAgBkC,SAAhB;AACH,6BATD;AAUH;AACD,+BAAO7C,UAAP;AACH;;;kDAEoB8C,S,EAAW;AAC5B,4BAAM9C,aAAa,EAAnB;AACA,4BAAI8C,UAAUX,IAAV,KAAmB,OAAvB,EAAgC;AAC5B,gCAAMC,cAAc,EAApB;;AAEAU,sCAAUT,OAAV,CAAkBzC,OAAlB,CAA0B,UAAC0C,MAAD,EAASC,WAAT,EAAyB;AAC/CH,4CAAYG,WAAZ,IAA2BD,OAAOE,IAAlC;AACH,6BAFD;AAGAM,sCAAUL,IAAV,CAAe7C,OAAf,CAAuB,UAAC8C,GAAD,EAAS;AAC5B,oCAAMG,YAAY,EAAlB;;AAEAH,oCAAI9C,OAAJ,CAAY,UAACgB,KAAD,EAAQ2B,WAAR,EAAwB;AAChC,wCAAMhC,MAAM6B,YAAYG,WAAZ,CAAZ;AACAM,8CAAUtC,GAAV,IAAiBK,KAAjB;AACH,iCAHD;;AAKAZ,2CAAWW,IAAX,CAAgBkC,SAAhB;AACH,6BATD;AAUH;AACD,+BAAO7C,UAAP;AACH;;;;;;+BA3JgBd,a","file":"data_formatter.js","sourcesContent":["/* eslint-disable no-plusplus */\nimport _ from 'lodash';\nimport decodeGeoHash from './geohash';\n\nexport default class DataFormatter {\n    constructor(ctrl, kbn) {\n        this.ctrl = ctrl;\n        this.kbn = kbn;\n    }\n\n    setValues(data) {\n        if (this.ctrl.series && this.ctrl.series.length > 0) {\n            let highestValue = 0;\n            let lowestValue = Number.MAX_VALUE;\n\n            this.ctrl.series.forEach((serie) => {\n                const lastPoint = _.last(serie.datapoints);\n                const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n                const location = _.find(this.ctrl.locations, (loc) => {\n                    return loc.key.toUpperCase() === serie.alias.toUpperCase();\n                });\n\n                if (!location) return;\n\n                if (_.isString(lastValue)) {\n                    data.push({key: serie.alias, value: 0, valueFormatted: lastValue, valueRounded: 0});\n                } else {\n                    const dataValue = {\n                        key: serie.alias,\n                        locationName: location.name,\n                        locationLatitude: location.latitude,\n                        locationLongitude: location.longitude,\n                        value: serie.stats[this.ctrl.panel.valueName],\n                        valueFormatted: lastValue,\n                        valueRounded: 0\n                    };\n\n                    if (dataValue.value > highestValue) highestValue = dataValue.value;\n                    if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n                    dataValue.valueRounded = this.kbn.roundValue(dataValue.value, parseInt(this.ctrl.panel.decimals, 10) || 0);\n                    data.push(dataValue);\n                }\n            });\n\n            data.highestValue = highestValue;\n            data.lowestValue = lowestValue;\n            data.valueRange = highestValue - lowestValue;\n        }\n    }\n\n    createDataValue(encodedGeohash, decodedGeohash, locationName, value) {\n        const dataValue = {\n            key: encodedGeohash,\n            locationName: locationName,\n            locationLatitude: decodedGeohash.latitude,\n            locationLongitude: decodedGeohash.longitude,\n            value: value,\n            valueFormatted: value,\n            valueRounded: 0\n        };\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n        return dataValue;\n    }\n\n    setGeohashValues(dataList, data) {\n        if (!this.ctrl.panel.esGeoPoint || !this.ctrl.panel.esMetric) return;\n\n        if (dataList && dataList.length > 0) {\n            let highestValue = 0;\n            let lowestValue = Number.MAX_VALUE;\n\n            dataList.forEach((result) => {\n                if (result.type === 'table') {\n                    const columnNames = {};\n\n                    result.columns.forEach((column, columnIndex) => {\n                        columnNames[column.text] = columnIndex;\n                    });\n\n                    result.rows.forEach((row) => {\n                        const encodedGeohash = row[columnNames[this.ctrl.panel.esGeoPoint]];\n                        const decodedGeohash = decodeGeoHash(encodedGeohash);\n                        const locationName = this.ctrl.panel.esLocationName ? row[columnNames[this.ctrl.panel.esLocationName]] : encodedGeohash;\n                        const value = row[columnNames[this.ctrl.panel.esMetric]];\n\n                        const dataValue = this.createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue);\n                        if (dataValue.value > highestValue) highestValue = dataValue.value;\n                        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n                        data.push(dataValue);\n                    });\n\n                    data.highestValue = highestValue;\n                    data.lowestValue = lowestValue;\n                    data.valueRange = highestValue - lowestValue;\n                } else {\n                    result.datapoints.forEach((datapoint) => {\n                        const encodedGeohash = datapoint[this.ctrl.panel.esGeoPoint];\n                        const decodedGeohash = decodeGeoHash(encodedGeohash);\n                        const locationName = this.ctrl.panel.esLocationName ? datapoint[this.ctrl.panel.esLocationName] : encodedGeohash;\n                        const value = datapoint[this.ctrl.panel.esMetric];\n\n                        const dataValue = this.createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue);\n                        if (dataValue.value > highestValue) highestValue = dataValue.value;\n                        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n                        data.push(dataValue);\n                    });\n\n                    data.highestValue = highestValue;\n                    data.lowestValue = lowestValue;\n                    data.valueRange = highestValue - lowestValue;\n                }\n            });\n        }\n    }\n\n    static tableHandler(tableData) {\n        const datapoints = [];\n        if (tableData.type === 'table') {\n            const columnNames = {};\n\n            tableData.columns.forEach((column, columnIndex) => {\n                columnNames[columnIndex] = column;\n            });\n            tableData.rows.forEach((row) => {\n                const datapoint = {};\n\n                row.forEach((value, columnIndex) => {\n                    const key = columnNames[columnIndex];\n                    datapoint[key] = value;\n                });\n\n                datapoints.push(datapoint);\n            });\n        }\n        return datapoints;\n    }\n\n    static tableHandlers(tableData) {\n        const datapoints = [];\n        if (tableData.type === 'table') {\n            const columnNames = {};\n\n            tableData.columns.forEach((column, columnIndex) => {\n                columnNames[columnIndex] = column.text;\n            });\n            tableData.rows.forEach((row) => {\n                const datapoint = {};\n\n                row.forEach((value, columnIndex) => {\n                    const key = columnNames[columnIndex];\n                    datapoint[key] = value;\n                });\n\n                datapoints.push(datapoint);\n            });\n        }\n        return datapoints;\n    }\n\n    setTableValues(tableData, data) {\n        if (tableData && tableData.length > 0) {\n            for (let dataIndex = 0; dataIndex < tableData.length; dataIndex++) {\n                tableData[dataIndex].forEach((datapoint) => {\n                    data.push(datapoint);\n                });\n            }\n        }\n    }\n\n    setJsonValues(data) {\n        if (this.ctrl.series && this.ctrl.series.length > 0) {\n            let highestValue = 0;\n            let lowestValue = Number.MAX_VALUE;\n\n            this.ctrl.series.forEach((point) => {\n                const dataValue = {\n                    key: point.key,\n                    locationName: point.name,\n                    locationLatitude: point.latitude,\n                    locationLongitude: point.longitude,\n                    value: (point.value !== undefined) ? point.value : 1,\n                    valueRounded: 0\n                };\n                if (dataValue.value > highestValue) highestValue = dataValue.value;\n                if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n                dataValue.valueRounded = Math.round(dataValue.value);\n                data.push(dataValue);\n            });\n            data.highestValue = highestValue;\n            data.lowestValue = lowestValue;\n            data.valueRange = highestValue - lowestValue;\n        }\n    }\n}\n\n"]}