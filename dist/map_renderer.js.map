{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","events","on","render","renderingCompleted","data","map","mapContainer","find","id","indexOf","MP","panel","ak","then","console","log","elementId","BMap","Map","enableMapClick","centerAndZoom","Point","lng","lat","parseInt","initialZoom","enableScrollWheelZoom","setMapStyle","style","theme","navigationSwitch","NavigationControl","scaleSwitch","ScaleControl","navigation","addControl","scale"],"mappings":";;;;;;AAKe,aAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACnDA,aAAKC,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAM;AAC3BC;AACAH,iBAAKI,kBAAL;AACH,SAHD;;AAKA,iBAASD,MAAT,GAAkB;AACd,gBAAI,CAACH,KAAKK,IAAN,IAAcL,KAAKM,GAAvB,EAA4B;;AAE5B,gBAAMC,eAAeT,KAAKU,IAAL,CAAU,eAAV,CAArB;;AAEA,gBAAID,aAAa,CAAb,EAAgBE,EAAhB,CAAmBC,OAAnB,CAA2B,IAA3B,IAAmC,CAAC,CAAxC,EAA2C;AACvC;AACH;;AAED,gBAAI,CAACV,KAAKM,GAAV,EAAe;AACXK,mBAAGX,KAAKY,KAAL,CAAWC,EAAd,EACKC,IADL,CACU,gBAAQ;AACVC,4BAAQC,GAAR,CAAY,OAAZ;AACA,wBAAMC,YAAY,WAAWjB,KAAKY,KAAL,CAAWH,EAAxC;AACAT,yBAAKkB,IAAL,GAAYA,IAAZ;AACAlB,yBAAKM,GAAL,GAAW,IAAIY,KAAKC,GAAT,CAAaF,SAAb,EAAwB;AAC/BG,wCAAgBpB,KAAKY,KAAL,CAAWQ;AADI,qBAAxB,CAAX;AAGApB,yBAAKM,GAAL,CAASe,aAAT,CAAuB,IAAIH,KAAKI,KAAT,CAAetB,KAAKY,KAAL,CAAWW,GAA1B,EAA+BvB,KAAKY,KAAL,CAAWY,GAA1C,CAAvB,EAAuEC,SAASzB,KAAKY,KAAL,CAAWc,WAApB,EAAiC,EAAjC,CAAvE;AACA1B,yBAAKM,GAAL,CAASqB,qBAAT;AACA3B,yBAAKM,GAAL,CAASsB,WAAT,CAAqB,EAACC,OAAO7B,KAAKY,KAAL,CAAWkB,KAAnB,EAArB;;AAEA9B,yBAAK+B,gBAAL,GAAwB,IAAIb,KAAKc,iBAAT,EAAxB;AACAhC,yBAAKiC,WAAL,GAAmB,IAAIf,KAAKgB,YAAT,EAAnB;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAIlC,KAAKY,KAAL,CAAWuB,UAAX,KAA0B,IAA9B,EAAoCnC,KAAKM,GAAL,CAAS8B,UAAT,CAAoBpC,KAAK+B,gBAAzB;AACpC,wBAAI/B,KAAKY,KAAL,CAAWyB,KAAX,KAAqB,IAAzB,EAA+BrC,KAAKM,GAAL,CAAS8B,UAAT,CAAoBpC,KAAKiC,WAAzB;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,iBApFL;AAqFH;AACJ;AACJ;;uBAvGuBrC,I;;;;AAHhBe,c,mBAAAA,E","file":"map_renderer.js","sourcesContent":["/* eslint-disable no-plusplus */\nimport './css/leaflet.css!';\nimport {MP} from './libs/baidumap.js';\n\n\nexport default function link(scope, elem, attrs, ctrl) {\n    ctrl.events.on('render', () => {\n        render();\n        ctrl.renderingCompleted();\n    });\n\n    function render() {\n        if (!ctrl.data && ctrl.map) return;\n\n        const mapContainer = elem.find('.mapcontainer');\n\n        if (mapContainer[0].id.indexOf('{{') > -1) {\n            return;\n        }\n\n        if (!ctrl.map) {\n            MP(ctrl.panel.ak)\n                .then(BMap => {\n                    console.log('start');\n                    const elementId = 'mapid_' + ctrl.panel.id;\n                    ctrl.BMap = BMap;\n                    ctrl.map = new BMap.Map(elementId, {\n                        enableMapClick: ctrl.panel.enableMapClick\n                    });\n                    ctrl.map.centerAndZoom(new BMap.Point(ctrl.panel.lng, ctrl.panel.lat), parseInt(ctrl.panel.initialZoom, 10));\n                    ctrl.map.enableScrollWheelZoom();\n                    ctrl.map.setMapStyle({style: ctrl.panel.theme});\n\n                    ctrl.navigationSwitch = new BMap.NavigationControl();\n                    ctrl.scaleSwitch = new BMap.ScaleControl();\n                    // ctrl.overviewMapSwitch = new BMap.OverviewMapControl({\n                    //     isOpen: true,\n                    //     anchor: BMAP_ANCHOR_BOTTOM_RIGHT\n                    // });\n                    // ctrl.mapTypeSwitch = new BMap.MapTypeControl();\n\n                    if (ctrl.panel.navigation === true) ctrl.map.addControl(ctrl.navigationSwitch);\n                    if (ctrl.panel.scale === true) ctrl.map.addControl(ctrl.scaleSwitch);\n                    // if (ctrl.panel.overviewMap === true) ctrl.map.addControl(ctrl.overviewMapSwitch);\n                    // if (ctrl.panel.mapType === true) ctrl.map.addControl(ctrl.mapTypeSwitch);\n\n                    // ctrl.map.addEventListener('dragend', function () {\n                    //     const center = ctrl.map.getCenter();\n                    //     ctrl.panel.lat = center.lat;\n                    //     ctrl.panel.lng = center.lng;\n                    // });\n                    //\n                    // ctrl.map.addEventListener('click', function (event) {\n                    //     if (ctrl.clickHandler && ctrl.clickHandler.length > 0) {\n                    //         ctrl.clickHandler.forEach(handler => handler(event));\n                    //     }\n                    // }, true);\n\n                    // eslint-disable-next-line no-unused-expressions\n                    // ctrl.distanceTool = new BMapLib.DistanceTool(ctrl.map);\n                    // ctrl.rectangleZoomTool = new BMapLib.RectangleZoom(ctrl.map, {\n                    //     followText: '拖拽鼠标进行操作',\n                    //     autoClose: true\n                    // });\n                    //\n                    // ctrl.trafficSwitch = new BMapLib.TrafficControl({\n                    //     showPanel: false, // 是否显示路况提示面板\n                    // });\n                    // ctrl.trafficSwitch.setOffset(new BMap.Size(10, 40));\n                    // // ctrl.trafficSwitch.setAnchor(BMAP_ANCHOR_BOTTOM_RIGHT);\n                    // if (ctrl.panel.traffic === true) {\n                    //     ctrl.map.addControl(ctrl.trafficSwitch);\n                    // }\n\n                    // const menu = new BMap.ContextMenu();\n                    // const txtMenuItem = [\n                    //     {\n                    //         text: '测距',\n                    //         callback: function () {\n                    //             ctrl.distanceTool.open();\n                    //         }\n                    //     },\n                    //     {\n                    //         text: '拉框放大',\n                    //         callback: function () {\n                    //             ctrl.rectangleZoomTool.open();\n                    //         }\n                    //     }, {\n                    //         text: '移到中心点',\n                    //         callback: function callback() {\n                    //             ctrl.panToCenterPoint();\n                    //         }\n                    //     }, {\n                    //         text: '重置地图',\n                    //         callback: function callback() {\n                    //             ctrl.map.reset();\n                    //         }\n                    //     },\n                    // ];\n                    //\n                    // for (let menuIndex = 0; menuIndex < txtMenuItem.length; menuIndex++) {\n                    //     menu.addItem(new BMap.MenuItem(txtMenuItem[menuIndex].text, txtMenuItem[menuIndex].callback, 100));\n                    // }\n                    // ctrl.map.addContextMenu(menu);\n                    // ctrl.addNode(BMap);\n                });\n        }\n    }\n}\n"]}